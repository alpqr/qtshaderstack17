Mission
-------

One language for all shaders in Qt and apps, regardless of the target
APIs and platforms, built around SPIR-V, offline compilation and
processing, and a number of open-source components.

Background: APIs and shading languages
--------------------------------------

"SPIR-V is a simple binary intermediate language for graphical shaders
and compute kernels."

- Vulkan

  * Spec only mandates SPIR-V binary support.

  * No runtime compilation, no reflection. (reflection is essential for ShaderEffect for example)

- OpenGL (ES)

  * modern drivers on the desktop will have GL_ARB_gl_spirv
  * GLSL >= 130
  * GLSL <= 120
  
- D3D: HLSL, two intermediate languages (DXBC for shader model <= 5, DXIL for shader model 6).

  * The new compiler for DXIL is LLVM-based and open:
    https://github.com/Microsoft/DirectXShaderCompiler

    Not directly useful now.
  
  * For now we could generate HLSL sources from SPIR-V, see
    SPIRV-Cross (experimental).
  
  * However, may improve in the future and can skip HLSL completly, if
    DXIL <-> SPIRV becomes reality
  
- Metal: MSL
  * for now we could generate MSL sources from SPIR-V, see SPIRV-Cross (experimental)

Components
----------

https://github.com/KhronosGroup/glslang

  * "An OpenGL and OpenGL ES shader front end and validator. There are
    several components: A GLSL/ESSL front-end for reference validation
    and translation of GLSL/ESSL into an AST. An HLSL front-end for
    translation of a broad generic HLL into the AST.  A SPIR-V back
    end for translating the AST to SPIR-V.  A standalone wrapper,
    glslangValidator, that can be used as a command-line tool for the
    above."

  * Pre-builts ship in Android NDK and Vulkan SDK for Windows/Linux.
    
https://github.com/KhronosGroup/SPIRV-Tools

  * "The SPIR-V Tools project provides an API and commands for
    processing SPIR-V modules. The project includes an assembler,
    binary module parser, disassembler, validator, and optimizer for
    SPIR-V."

  * Will not be directly used by Qt.

https://github.com/google/shaderc
    
  * "A collection of tools, libraries and tests for shader
    compilation. At the moment it includes: glslc, a command line
    compiler for GLSL/HLSL to SPIR-V, and libshaderc, a library API
    for doing the same. Shaderc wraps around core functionality in
    glslang and SPIRV-Tools. Shaderc aims to to provide: A command
    line compiler with GCC- and Clang-like usage, for better
    integration with build systems an API where functionality can be
    added without breaking existing clients. An API supporting
    standard concurrency patterns across multiple operating systems.
    Increased functionality such as file #include support."
    
  * So a better command line and a library. The latter is essential if
    runtime compilation is desired.

  * Let's try to avoid pulling in and maintaining a full compiler
    stack into Qt. Focus on offline (build-time) shader compilation.
  
  * May be used by Qt, although for basic compilation glslangValidator
    is sufficient. glslc is likely a better choice though.

https://github.com/KhronosGroup/SPIRV-Cross
    
  * "SPIRV-Cross is a practical tool and library for performing
    reflection on SPIR-V and disassembling SPIR-V back to high level
    languages."

  * The key: provides an API to perform reflection on SPIR-V binaries,
    and to disassemble to GLSL/HLSL/MSL for APIs that cannot support
    SPIR-V.
     
Implementation
--------------

The "one language" is in practice GLSL. (could be HLSL, but support
for that is presumably less complete in glslang)

At build time:

  - compile to SPIR-V (either via external glslc/glslangValidator or
    built-in compiler via libshaderc)
  
  - perform reflection with SPIR-V cross -> output JSON, binary data,
    whatever, include in build next to the SPIR-V binary
  
  - depending on target platform, generate GLSL/HLSL/MSL as well and
    include it in the lib/app next to - or instead of - the SPIR-V
    binary

All this can be encapsulated and driven by a Qt tool that is then run
by qmake/qbs.

At run time:

  - dig out the SPIR-V binary or GLSL/HLSL/MSL source and the
    reflection data
  
  - expose reflection info through convenient Qt APIs
  
  - consume SPIR-V or compile on the traditional legacy route for
    GLES, D3D, etc. The actual graphics API specifics are not to be
    handled in the core API: just the actual binary/source (in
    addition to reflection data)

Challenges
----------

  * Interfacing with shaders (input/output)

    Languages/APIs do not map 1:1. Think of traditional uniforms for
    instance, which do not exist in the same form in many APIs/languages.

What Does This Module Provide?
------------------------------

  * qspirv: a library for the build and run-time steps outlined
    above. The build time part is separate so that it can be used
    independently by qsc.

  * qsc: a host tool to perform SPIR-V processing, with the relevant
    parts of qspirv compiled-in. Being a host tool it is suitable also
    for cross-compilation and to be run by qmake/qbs.
